/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package calculatordemo2;

import javax.swing.JButton;
import javax.swing.JTextArea;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import static org.junit.jupiter.api.Assertions.*;

import java.awt.event.ActionEvent;
import java.lang.reflect.Field;  // This brings in the Field feature of Java Reflection

class CalculatorUITest {

    private static CalculatorUI classUnderTest;

    @BeforeAll
    public static void setUp() {
        classUnderTest = new CalculatorUI();
    }

    @DisplayName("Testing that writer writes the display")
    @Test
    public void writerSetText() throws Exception {
        // Use reflection to access the private field “text”
        Class cls = classUnderTest.getClass();
        Field field = cls.getDeclaredField("text");
        field.setAccessible(true);
        // Set the value of “text” to “mytext”
        JTextArea text = (JTextArea) field.get(classUnderTest);
        text.setText("mytext");
        // Test that the value of “text” is “mytext”
        assertEquals("mytext", text.getText());
    }

    @DisplayName("Testing reader method")
    @Test
    public void testReader()
    {
        //When the text area is empty
        classUnderTest.text.setText("");
        assertEquals(0.0, classUnderTest.reader());

        //When the text area recieves a number
        classUnderTest.text.setText("75.5");
        assertEquals(75.5, classUnderTest.reader());

        //When the text area recieves a non-number
        classUnderTest.text.setText("wow");
        assertThrows(NumberFormatException.class, classUnderTest::reader);
    }

    @DisplayName("Testing writer method")
    @Test
    public void testWriter()
    {
        //Writing a number value to the text area
        classUnderTest.writer(75.5);
        assertEquals("75.5", classUnderTest.text.getText());

        //Writing a non-number value to the text area
        classUnderTest.writer(Double.NaN);
        assertEquals("", classUnderTest.text.getText());

    }

    //Testing actionPerformed() method
    @DisplayName("Testing number button clicked")
    @Test
    public void testNumClicked()
    {
        classUnderTest.text.setText("4");
        classUnderTest.actionPerformed(new ActionEvent(new JButton("4"), 0, "4"));
        assertEquals("44", classUnderTest.text.getText());
    }

    @DisplayName("Testing use of buttons to add two numbers")
    @Test
    public void testPlus()
    {
        
    }

    @DisplayName("Testing use of buttons to subtract two numbers")
    @Test
    public void testMinus()
    {
        
    }

    @DisplayName("Testing use of common function button")
    @Test
    public void testComFunct()
    {

    }

    @DisplayName("Testing use of trig button")
    @Test
    public void testTrig()
    {

    }

    @DisplayName("Testing use of inverse trig button")
    @Test
    public void testInvTrig()
    {

    }

    @DisplayName("Testing use of equals button")
    @Test
    public void testEquals()
    {

    }

    @DisplayName("Testing use of cancel button")
    public void testCancel()
    {

    }







    
    @Test 
    void appPanelIsCreated() {
        assertNotNull(classUnderTest, "app should have a panel object");
    }
}

